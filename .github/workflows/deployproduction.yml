name: Auto Deploy Production
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            **/node_modules/.cache
          key: ${{ runner.OS }}-check-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        working-directory: ./src
        run: npm ci
      - name: Run Lint
        working-directory: ./src
        run: npm run lint

  unittest:
    name: Unit Test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            **/node_modules/.cache
          key: ${{ runner.OS }}-check-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        working-directory: ./src
        run: npm ci
      - name: Run Test
        working-directory: ./src
        run: npm run test
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v2
        with:
          name: rrs-web-code-coverage-report
          path: src/coverage

  sonarcloud:
    needs:
      - lint
      - unittest
    # if: success() && github.ref == 'refs/heads/master'
    if: success()
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      # - uses: actions/checkout@v2
      #   with:
      #     fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            **/node_modules/.cache
          key: ${{ runner.OS }}-check-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        working-directory: ./src
        run: npm ci
      - name: Download Code Coverage Artifact
        uses: actions/download-artifact@v2
        with:
          name: rrs-web-code-coverage-report
          path: src/coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: src
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker-build:
    name: Docker Build

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Make sure the code is tested before build docker
    needs: sonarcloud
    if: github.event_name == 'push' && success() && github.ref == 'refs/heads/master'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Create and gather metadata
      - name: Get Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data

      - name: Prepare Version and Tag
        id: prep
        env:
          ORGANIZATION: sepulsa # example
          APP_NAME: rrs-web # example
        # VERSION=$(git describe --tags --abbrev=0) # will fail if never tagged
        working-directory: ./src
        run: |
          set -e          
          VERSION=$(grep "version" ./package.json | grep -Eo '[0-9]+(\.[0-9]+){2}(-[^"]+)?')
          DOCKER_IMAGE=${ORGANIZATION}/${APP_NAME}
          TAGS=${DOCKER_IMAGE}:$VERSION-dev-${GITHUB_SHA::8}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      # Deploy to docker registry
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-main-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Docker Registry
        # if: github.event_name == 'release'
        uses: docker/login-action@v1
        with:
          #registry: ${{ secrets.DOCKER_REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKER_USERNAME_DOCKERHUB }}
          password: ${{ secrets.DOCKER_PASSWORD_DOCKERHUB }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: src
          file: src/Dockerfile
          platforms: linux/amd64
          # push: ${{ github.event_name == 'release' }}
          push: true
          # tags: ${{ secrets.DOCKER_REGISTRY_DOCKERHUB }}/${{ steps.prep.outputs.tags }}
          #tags: ${{ steps.prep.outputs.tags }}
          tags: sepulsa/relative-ranking-system:rrs-web-${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-main-cache
          cache-to: type=local,dest=/tmp/.buildx-main-cache
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
          build-args: |
            NUXT_ENV_RRS_APP_TITLE=${{ secrets.NUXT_ENV_RRS_APP_TITLE_PROD }}
            NUXT_ENV_RRS_API_URL=${{ secrets.NUXT_ENV_RRS_API_URL_PROD }}
            NUXT_ENV_RRS_GAUTH_CLIENTID=${{ secrets.NUXT_ENV_RRS_GAUTH_CLIENTID_PROD }}

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Setup GCP
        uses: google-github-actions/setup-gcloud@master
        with:
          version: "290.0.1"
          project_id: ${{ secrets.GCLOUD_PROJECT_PROD }}
          service_account_key: ${{ secrets.GSA_KEY_PROD }}
      - run: |
          gcloud container clusters get-credentials ${{ secrets.GCLOUD_CLUSTER_PROD }} --region ${{ secrets.GCLOUD_REGION_PROD }} --project ${{ secrets.GCLOUD_PROJECT_PROD }}
      - name: Deploy
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          kubectl -n ${{ secrets.APP_K8S_NAMESPACE_PROD }} set image deployment/${{ secrets.APP_K8S_DEPLOYMENT_NAME_PROD }} ${{ secrets.APP_K8S_CONTAINER_NAME_PROD }}=sepulsa/relative-ranking-system:rrs-web-${{ github.sha }}